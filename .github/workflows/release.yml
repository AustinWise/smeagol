# Creates a GitHub release, builds the program for multiple targets, then
# uploads the build assets to the GitHub release. Uses the body of the
# annotated tag (git tag -a) to populate the body of the release.
#
# Based on the following:
# https://github.com/BurntSushi/ripgrep/blob/df83b8b44426b3f2179abe632eb183e8c8270524/.github/workflows/release.yml
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - ci_testing
    tags:
      # Despite their appearance, these are NOT regular expressions =(
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+-*" # prerelease
jobs:
  create-release:
    runs-on: ubuntu-24.04
    outputs:
      id: ${{ steps.release.outputs.id }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    env:
      RELEASE_BODY_FILE_NAME: __release_body_file_dont_commit__.md
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create release body file
        shell: bash
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            git tag -l ${{ github.ref }} --format='%(contents)' > $RELEASE_BODY_FILE_NAME
          else
            echo "test release, please ignore" > $RELEASE_BODY_FILE_NAME
          fi
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: true
          body_path: ${{ env.RELEASE_BODY_FILE_NAME }}
          prerelease: ${{ contains(github.ref_name, '-') }}

  build-release:
    needs: ["create-release"]
    runs-on: ${{ matrix.image }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # The name of the program executable.
      PROGRAM_NAME: smeagol-wiki
    strategy:
      matrix:
        include:
          - build: linux-x64
            os: ubuntu
            image: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - build: linux-arm32
            os: ubuntu
            image: ubuntu-24.04
            target: arm-unknown-linux-gnueabihf
            use-cross: true
          - build: linux-arm64
            os: ubuntu
            image: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            use-cross: true
          - build: macos-x64
            os: macos
            image: macos-15
            target: x86_64-apple-darwin
            use-cross: false
          - build: macos-arm64
            os: macos
            image: macos-15
            target: aarch64-apple-darwin
            use-cross: false
          - build: win-x64-msvc
            os: windows
            image: windows-2022
            target: x86_64-pc-windows-msvc
            use-cross: false
          - build: win-x86-msvc
            os: windows
            image: windows-2022
            target: i686-pc-windows-msvc
            use-cross: false
          - build: win-arm64-msvc
            os: windows
            image: windows-2022
            target: aarch64-pc-windows-msvc
            use-cross: false

    steps:

      # NOTE NOTE NOTE NOTE NOTE NOTE
      #
      # See .cargo/config.toml for an explination of these settings.
      # Keep these settings and that file in sync.
      #
      # NOTE NOTE NOTE NOTE NOTE NOTE
      - name: Rust Flags
        shell: bash
        if: matrix.os == 'windows'
        run: |
          echo "RUSTFLAGS=-C target-feature=+crt-static -C link-arg=/DEPENDENTLOADFLAG:0x800" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
          profile: minimal

      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Strip release binary (macos)
        if: matrix.os == 'macos'
        run: strip "target/${{ matrix.target }}/release/${{ env.PROGRAM_NAME }}"

      - name: Build archive
        shell: bash
        run: |
          staging="${PROGRAM_NAME}-${{ github.ref_name }}-${{ matrix.target }}"
          mkdir -p "$staging"/doc

          cp {README.md,LICENSE} "$staging/"
          cp CHANGELOG.md "$staging/doc/"

          if [ "${{ matrix.os }}" = "windows" ]; then
            cp "target/${{ matrix.target }}/release/${PROGRAM_NAME}.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/${PROGRAM_NAME}" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  publish-release:
    if: github.ref_type == 'tag'
    needs: ["create-release", "build-release"]
    runs-on: ubuntu-24.04
    steps:
      - name: Publish release, by setting draft to false
        shell: bash
        run: |
          curl \
            -Ssf \
            -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.create-release.outputs.id }}" \
            -d '{"draft":false}'
